// MACHINE GENERATED BY 'go generate' COMMAND
// TO EDIT A TYPE OR METHOD, COPY IT TO ANOTHER FILE IN THE PACKAGE
package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
)

func writestring(w io.Writer, s string, must int) (err error) {
	data := []byte(s)
	switch l := len(data); {
	case l > must:
		_, err = w.Write(data[:must])
	case l < must:
		_, err = w.Write(data[:l])
		if err != nil {
			return err
		}
		underflow := must - l
		_, err = w.Write(bytes.Repeat([]byte{0x00}, underflow))
	default:
		_, err = w.Write(data[:l])
	}
	return err
}

func ioErr(name, kind string, ac, ex int) error {
	return fmt.Errorf("%s: short %s: %d/%d", name, kind, ac, ex)
}

type Point struct {
	X int32
	Y int32
}

type Rectangle struct {
	Min Point
	Max Point
}

// type Drawd struct { //defined in other file

type DrawE struct {
	hdr   byte
	dstid uint32
	srcid uint32
	c     Point
	a     uint32
	b     uint32
	thick uint32
	sp    Point
	alpha uint32
	phi   uint32
}

type DrawAF struct {
	hdr   byte
	dstid uint32
	srcid uint32
	r     Rectangle
	sp    Point
}

func (z *Point) ReadBinary(r io.Reader) (err error) {
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.X); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.Y); err != nil {
		return err
	}

	return nil
}

func (z Point) WriteBinary(w io.Writer) (err error) {

	if err := binary.Write(w, binary.LittleEndian, z.X); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.Y); err != nil {
		return err
	}

	return nil
}

func (z *Rectangle) ReadBinary(r io.Reader) (err error) {
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := z.Min.ReadBinary(r); err != nil {
		return err
	}

	if err := z.Max.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z Rectangle) WriteBinary(w io.Writer) (err error) {

	if err := z.Min.WriteBinary(w); err != nil {
		return err
	}

	if err := z.Max.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *Drawd) ReadBinary(r io.Reader) (err error) {
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.hdr); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.dstid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.srcid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.maskid); err != nil {
		return err
	}

	if err := z.r.ReadBinary(r); err != nil {
		return err
	}

	if err := z.sp.ReadBinary(r); err != nil {
		return err
	}

	if err := z.maskp.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z Drawd) WriteBinary(w io.Writer) (err error) {

	if err := binary.Write(w, binary.LittleEndian, z.hdr); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.dstid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.srcid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.maskid); err != nil {
		return err
	}

	if err := z.r.WriteBinary(w); err != nil {
		return err
	}

	if err := z.sp.WriteBinary(w); err != nil {
		return err
	}

	if err := z.maskp.WriteBinary(w); err != nil {
		return err
	}

	return nil
}

func (z *DrawE) ReadBinary(r io.Reader) (err error) {
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.hdr); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.dstid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.srcid); err != nil {
		return err
	}

	{

		r := io.LimitReader(r, int64(8))
		if err := z.c.ReadBinary(r); err != nil {
			return err
		}
	}

	if err := binary.Read(r, binary.LittleEndian, &z.a); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.b); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.thick); err != nil {
		return err
	}

	{

		r := io.LimitReader(r, int64(8))
		if err := z.sp.ReadBinary(r); err != nil {
			return err
		}
	}

	if err := binary.Read(r, binary.LittleEndian, &z.alpha); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.phi); err != nil {
		return err
	}

	return nil
}

func (z DrawE) WriteBinary(w io.Writer) (err error) {

	if err := binary.Write(w, binary.LittleEndian, z.hdr); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.dstid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.srcid); err != nil {
		return err
	}

	if err := z.c.WriteBinary(w); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.a); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.b); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.thick); err != nil {
		return err
	}

	if err := z.sp.WriteBinary(w); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.alpha); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.phi); err != nil {
		return err
	}

	return nil
}

func (z *DrawAF) ReadBinary(r io.Reader) (err error) {
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := binary.Read(r, binary.LittleEndian, &z.hdr); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.dstid); err != nil {
		return err
	}

	if err := binary.Read(r, binary.LittleEndian, &z.srcid); err != nil {
		return err
	}

	if err := z.r.ReadBinary(r); err != nil {
		return err
	}

	if err := z.sp.ReadBinary(r); err != nil {
		return err
	}

	return nil
}

func (z DrawAF) WriteBinary(w io.Writer) (err error) {

	if err := binary.Write(w, binary.LittleEndian, z.hdr); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.dstid); err != nil {
		return err
	}

	if err := binary.Write(w, binary.LittleEndian, z.srcid); err != nil {
		return err
	}

	if err := z.r.WriteBinary(w); err != nil {
		return err
	}

	if err := z.sp.WriteBinary(w); err != nil {
		return err
	}

	return nil
}
